# Generated by Django 4.2.8 on 2024-12-06 02:15

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extras', '0105_customfield_min_max_values'),
        ('netbox_user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Approver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('aprovador', models.CharField(blank=True, max_length=100, unique=True)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Aprovador',
                'ordering': ('aprovador',),
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('ambiente', models.CharField(blank=True, max_length=100, unique=True)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Ambiente',
                'ordering': ('ambiente',),
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('grupo', models.CharField(blank=True, max_length=100, unique=True)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Grupo',
                'ordering': ('grupo',),
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('setor', models.CharField(blank=True, max_length=100, unique=True)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Setore',
                'ordering': ('setor',),
            },
        ),
        migrations.CreateModel(
            name='UserGroupAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('data_associacao', models.DateField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_associations', to='netbox_user.groups')),
            ],
        ),
        migrations.CreateModel(
            name='UserList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('comments', models.TextField(blank=True)),
                ('status_user', models.CharField(max_length=30)),
                ('groups', models.ManyToManyField(blank=True, related_name='users', through='netbox_user.UserGroupAssociation', to='netbox_user.groups')),
                ('setor', models.ManyToManyField(blank=True, related_name='users', to='netbox_user.sector')),
                ('tags', models.ManyToManyField(blank=True, to='extras.tag')),
            ],
            options={
                'verbose_name': 'Usu√°rio',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='usergroupassociation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_associations', to='netbox_user.userlist'),
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('recurso', models.CharField(blank=True, max_length=100, unique=True)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Recurso',
                'ordering': ('recurso',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='usergroupassociation',
            unique_together={('user', 'group')},
        ),
        migrations.CreateModel(
            name='ResourceGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('index', models.IntegerField()),
                ('data_concessao', models.DateTimeField(blank=True, null=True)),
                ('tipo_acesso', models.CharField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('ambiente', models.ManyToManyField(blank=True, to='netbox_user.environment')),
                ('aprovador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_aprovador', to='netbox_user.approver')),
                ('groupslist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_group_rules', to='netbox_user.groups')),
                ('recurso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_group_rules', to='netbox_user.resources')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Recursos dos grupo',
                'ordering': ('groupslist', 'index'),
                'unique_together': {('groupslist', 'recurso')},
            },
        ),
        migrations.CreateModel(
            name='ResourceAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('periodo', models.CharField(max_length=30)),
                ('index', models.IntegerField()),
                ('comments', models.TextField(blank=True)),
                ('action', models.CharField(max_length=30)),
                ('tipo_acesso', models.CharField(blank=True)),
                ('data_concessao', models.DateField()),
                ('data_expiracao', models.DateField(blank=True, null=True)),
                ('justificativa', models.TextField(blank=True)),
                ('status', models.CharField(max_length=30)),
                ('ambiente', models.ManyToManyField(blank=True, to='netbox_user.environment')),
                ('aprovador', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='netbox_user.approver')),
                ('recurso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='netbox_user.resources')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='netbox_user.userlist')),
            ],
            options={
                'verbose_name': 'Recursos dos Usu√°rio',
                'ordering': ('user', 'index'),
                'unique_together': {('user', 'recurso')},
            },
        ),
    ]
